Test 1

"git init" - initialise git in the folder, from now on you can use git and you 
will have a hidden "git" folder that you will be able to see with "ls -a"

"git status" - will show a list of all files in the directory. Green will be the ones that 
are in git, red that are not in git (i.e. not saved)

"git add file_name" - you added your file to a git. But dont for get to write a commit message
"git add ." - adding all files from the directory

"git commit -m "your message"

"git log" - to see all commits. To finish wathing log press "q".

"git diff" - to see a difference between the last version on git and the saved version not on git

"git rm --cached -r ." - removes everything from the staging area (files to which you did "git add", but didnt write a message)

---------------------------------------------------------------------------
"git checkout file_name" - rolling the file to the last git version if u saved the file but not to git 
---------------------------------------------------------------------------

Plan
1. cd in a right directory
2. git init (if you havent already)
3. "git add file_name" for saving new/saving for the 1st time
4. "git commit -m "your message"



-----------------------------------------.gitignore-----------------------------------------
Plan
1. "touch .gitignore" - create .gitignore (note it is invisible)
2. "open .gitignore" - open it
3. Write all files you dont want to git

e.g. 
---------------------------------------------
|.DS_Store                                   |
|secrets.txt                                 |
|*.txt (ignores all files with txt extesion) |
---------------------------------------------


-----------------------------------------Gitclone----------------------------------
"git clone url_from_github_of_the_project" - this will download all files from the projcet


-----------------------------------------Branching and Merging----------------------------------
"git branch name" - create a new branch
"git branch" - shows at which branch are you
"git checkout branch_you_wanna_go" - to transfer between branches
"git merge branch_you_wanna_merge_with_main" - merging the minor branch with major
YOU MUST BE ON THE BRANCH TO WHICH YOU WANT TO MERGE A BRANCH
E.G. ig I want to merge 'test' to "main" I must be on main

"git push origin main -u" - push git "main branch" to github


-----------------------------------------Pull requests, forking----------------------------------
"fork on github" - you are creating a copy of someones repository to your github
this is not "git clone" after which you have an access to push changes

With forking you copy a repository, change it on your machine and then do a pull requests
that an original author needs to accept.


-----------------------------------------GitHub----------------------------------
PUSHING YOUR CHANGE HISTORY TO GitHub

1. Create a reository on GitHub through the web!!!
2. Copy a link from there and paste to the terminal  


